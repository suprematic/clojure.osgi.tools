(ns clojure.osgi.tools.bnd
	(require 
		[clojure.tools.logging :as log]
		[clojure.java.io :as io]
		[clojure.xml :as xml]))


(def RE_VERSION #"((\d+)\.(\d+).(\d+)).*")

(defn- trim-build-segment [version]
	(get (re-matches RE_VERSION version) 1))

(defn- attrs-of-tag [tag content]
	(map :attrs (filter #(= tag (:tag %)) content)))

(defn- bnd-lib-id [feature-id]
	(str "feature_" feature-id))

(defn- to-bnd-entry [id version]
	(str id ";version=" version))

(defn- to-bnd-bundle-entry [plugin]
	(let [id (:id plugin)
		  version (trim-build-segment (:version plugin))]
		  (to-bnd-entry id version)))

(defn- to-bnd-lib-entry [feature]
	(let [id (bnd-lib-id (:id feature))
		  version (trim-build-segment (:version feature))]
		  (to-bnd-entry id version)))

(defn- write-lib-file! [file feature-id feature-version entries]
	(with-open [writer (io/writer file)]
		(.write writer "############################################################\n")
		(.write writer "# BND lib file automatically generated by clojure.osgi.tools\n")
		(.write writer "# Source Eclipse feature:\n")
		(.write writer (str "# " feature-id "_" feature-version "\n"))
		(.write writer "############################################################\n")
		(doall (map #(.write writer (str % "\n")) entries))))

(defn create-lib-from-pde-feature
	"Creates a BND property file 
	based on the given PDE feature.xml file
	in the given directory."
	[feature-xml out-dir]
	(log/debug "parsing" feature-xml)
	(let [
		xml (xml/parse feature-xml)
		
		feature (:attrs xml)
		id (:id feature)
		version (:version feature)

		content (:content xml)
		includes (attrs-of-tag :includes content)
		plugins (attrs-of-tag :plugin content)

		bnd-lib-id (bnd-lib-id id)
		out-filename (str bnd-lib-id "-" (trim-build-segment version) ".lib")
		out-file (java.io.File. (str out-dir "/" bnd-lib-id "/" out-filename))

		libs (map to-bnd-lib-entry includes)
		bundles (map to-bnd-bundle-entry plugins)
		entries (concat libs bundles)]

		(.mkdirs (.getParentFile out-file))

		(write-lib-file! out-file id version entries)
		out-file))

(defn- find-files [dirpath pattern]
  (filter #(re-matches pattern (.getName %))
               (file-seq (java.io.File. dirpath))))

(defn- collect-feature-uris [dirpath]
	(let [unjared (find-files dirpath #"feature\.xml")
		jars (find-files dirpath #".+\.jar")
		jared (map #(str "jar:file:///" (.getAbsolutePath %) "!/feature.xml") jars)]
		(concat jared unjared)))

(defn create-libs-from-pde-features
	"Creates a BND lib property files based on
	the given directory with PDE features
	in the given directory for BND libs."
	[features-dir bnd-libs-dir]

	(let [feature-uris (collect-feature-uris features-dir)]
		(doall (map #(create-lib-from-pde-feature % bnd-libs-dir) feature-uris))))