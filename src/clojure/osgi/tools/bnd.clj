(ns clojure.osgi.tools.bnd
	(require 
		[clojure.java.io :as io]
		[clojure.xml :as xml]))


(def RE_VERSION #"((\d+)\.(\d+).(\d+)).*")

(defn- trim-build-segment [version]
	(get (re-matches RE_VERSION version) 1))

(defn- attrs-of-tag [tag content]
	(map :attrs (filter #(= tag (:tag %)) content)))

(defn- to-bnd-lib-bundle [plugin]
	(let [id (:id plugin)
		  version (trim-build-segment (:version plugin))]
		  (str id ";version=" version)))

(defn create-lib-from-pde-feature
	"Creates a BND property file 
	based on the given PDE feature.xml file
	in the given directory."
	[feature-xml out-dir]
	(let [
		xml (xml/parse feature-xml)
		feature (:attrs xml)
		content (:content xml)
		includes (attrs-of-tag :includes content)
		plugins (attrs-of-tag :plugin content)

		out-filename (str "p2_" (:id feature) "-" (trim-build-segment (:version feature)) ".lib")
		out-file (str out-dir "/" out-filename)

		bundles (map to-bnd-lib-bundle plugins)
		]
		(with-open [writer (io/writer out-file)]
			(.write writer "# BND lib file automatically generated by clojure.osgi.tools\n")
			(.write writer (str "# " (:id feature) "_" (:version feature) "\n"))
			;(map #() includes)
			(doall (map #(.write writer (str % "\n")) bundles)))

		bundles))

(defn create-libs-from-pde-features
	"Creates a BND lib property files based on
	the given directory with PDE features
	in the given directory for BND libs."
	[features-dir bnd-libs-dir]

	;TODO
	nil)